/*Cada letra digitada √© um n√≥. O cursor pode ir para frente e para tr√°s (simulando o
next e prev). Permita inser√ß√µes e remo√ß√µes em qualquer posi√ß√£o (insertAt,
removeAt).*/

// Cada letra √© um n√≥ (n√≥ duplamente ligado)
class Letra {
    constructor(char) {
        this.char = char;         // A letra em si
        this.anterior = null;     // Refer√™ncia √† letra anterior
        this.proximo = null;      // Refer√™ncia √† pr√≥xima letra
    }
}

// Editor de texto com lista duplamente ligada e cursor
class Editor {
    constructor() {
        this.inicio = null;     // In√≠cio do texto
        this.fim = null;        // Final do texto
        this.cursor = null;     // O cursor aponta para ONDE vamos inserir/remover
    }

    // Insere uma letra na posi√ß√£o atual do cursor
    insertAt(char) {
        const nova = new Letra(char);

        if (!this.inicio) {
            // Se estiver vazio, √© a primeira letra
            this.inicio = this.fim = nova;
            this.cursor = nova;
        } else if (!this.cursor) {
            // Se o cursor for nulo, insere no fim
            this.fim.proximo = nova;
            nova.anterior = this.fim;
            this.fim = nova;
            this.cursor = nova;
        } else {
            // Insere ANTES da posi√ß√£o do cursor
            nova.proximo = this.cursor;
            nova.anterior = this.cursor.anterior;

            if (this.cursor.anterior) {
                this.cursor.anterior.proximo = nova;
            } else {
                // Se for o primeiro, atualizamos o in√≠cio
                this.inicio = nova;
            }

            this.cursor.anterior = nova;
        }

        console.log(`‚úèÔ∏è Inserido: '${char}'`);
        this.printTexto();
    }

    // Remove a letra onde o cursor est√°
    removeAt() {
        if (!this.cursor) {
            console.log("‚õî Nada para remover.");
            return;
        }

        let remover = this.cursor;

        if (remover.anterior) {
            remover.anterior.proximo = remover.proximo;
        } else {
            this.inicio = remover.proximo;
        }

        if (remover.proximo) {
            remover.proximo.anterior = remover.anterior;
        } else {
            this.fim = remover.anterior;
        }

        this.cursor = remover.proximo;
        console.log(`‚ùå Removido: '${remover.char}'`);
        this.printTexto();
    }

    // Move o cursor para a pr√≥xima letra
    next() {
        if (this.cursor && this.cursor.proximo) {
            this.cursor = this.cursor.proximo;
            console.log("‚û°Ô∏è Cursor movido para frente.");
        } else {
            console.log("üö´ Cursor j√° est√° no fim.");
        }
        this.printTexto();
    }

    // Move o cursor para a letra anterior
    prev() {
        if (this.cursor && this.cursor.anterior) {
            this.cursor = this.cursor.anterior;
            console.log("‚¨ÖÔ∏è Cursor movido para tr√°s.");
        } else {
            console.log("üö´ Cursor j√° est√° no in√≠cio.");
        }
        this.printTexto();
    }

    // Exibe o texto com um "|" representando o cursor
    printTexto() {
        let atual = this.inicio;
        let output = "";

        while (atual) {
            if (atual === this.cursor) output += "|";
            output += atual.char;
            atual = atual.proximo;
        }

        // Se o cursor estiver no final (ap√≥s a √∫ltima letra)
        if (!this.cursor) output += "|";

        console.log("Texto:", output);
        console.log("----------------------------");
    }
}

// üß™ Teste da simula√ß√£o

const editor = new Editor();

editor.insertAt("H");
editor.insertAt("E");
editor.insertAt("L");
editor.insertAt("L");
editor.insertAt("O");  // Texto: HELLO

editor.prev();         // Move o cursor antes do √∫ltimo 'O'
editor.prev();         // Move o cursor entre os dois 'L's

editor.insertAt("-");  // Insere '-' entre os L's ‚Üí HEL-LO

editor.removeAt();     // Remove o 'L' que est√° ap√≥s o cursor

editor.next();         // Vai pro pr√≥ximo (o 'O')
editor.insertAt("!");  // Insere '!' antes do O