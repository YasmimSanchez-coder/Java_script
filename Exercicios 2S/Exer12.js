/*Use a estrutura para simular o hist√≥rico de p√°ginas acessadas. Com
traverseReverse, mostre a navega√ß√£o para tr√°s (voltar p√°gina).
Extra: implementar "ir para p√°gina espec√≠fica" usando find.*/

// Cada p√°gina √© um n√≥ da lista
class Pagina {
    constructor(nome) {
        this.nome = nome;          // Nome da p√°gina (URL)
        this.anterior = null;      // P√°gina anterior
        this.proximo = null;       // P√°gina seguinte
    }
}

// Hist√≥rico de navega√ß√£o com lista duplamente ligada
class HistoricoNavegacao {
    constructor() {
        this.inicio = null;        // Primeira p√°gina acessada
        this.fim = null;           // P√°gina mais recente
        this.atual = null;         // Onde o usu√°rio est√° agora
    }

    // Acessa uma nova p√°gina
    acessarPagina(nome) {
        const nova = new Pagina(nome);

        if (!this.inicio) {
            // Primeira p√°gina do hist√≥rico
            this.inicio = this.fim = nova;
        } else {
            // Liga a nova p√°gina no final do hist√≥rico
            this.fim.proximo = nova;
            nova.anterior = this.fim;
            this.fim = nova;
        }

        // A p√°gina atual agora √© a nova acessada
        this.atual = this.fim;
        console.log(`üåê P√°gina acessada: ${nome}`);
        this.mostrarPaginaAtual();
    }

    // Volta para a p√°gina anterior (como bot√£o "voltar")
    voltar() {
        if (this.atual && this.atual.anterior) {
            this.atual = this.atual.anterior;
            console.log("üîô Voltou para a p√°gina anterior.");
        } else {
            console.log("üö´ J√° est√° na primeira p√°gina.");
        }
        this.mostrarPaginaAtual();
    }

    // Mostra a p√°gina onde o usu√°rio est√° atualmente
    mostrarPaginaAtual() {
        if (this.atual) {
            console.log(`üìÑ P√°gina atual: ${this.atual.nome}`);
        } else {
            console.log("üì≠ Nenhuma p√°gina aberta.");
        }
        console.log("-------------------------");
    }

    // Mostra o hist√≥rico de tr√°s pra frente (como se fosse "voltar, voltar...")
    traverseReverse() {
        let atual = this.fim;
        let historico = "üîÅ Hist√≥rico reverso:\n";

        while (atual) {
            historico += `${atual.nome} <- `;
            atual = atual.anterior;
        }

        historico += "in√≠cio";
        console.log(historico);
        console.log("-------------------------");
    }

    // Vai direto para uma p√°gina espec√≠fica (se existir)
    irParaPagina(nome) {
        let atual = this.inicio;

        while (atual) {
            if (atual.nome === nome) {
                this.atual = atual;
                console.log(`üöÄ Pulou para a p√°gina: ${nome}`);
                this.mostrarPaginaAtual();
                return;
            }
            atual = atual.proximo;
        }

        console.log(`‚ùì P√°gina "${nome}" n√£o encontrada no hist√≥rico.`);
    }
}

// üß™ Testando a simula√ß√£o de hist√≥rico

const navegador = new HistoricoNavegacao();

navegador.acessarPagina("google.com");
navegador.acessarPagina("youtube.com");
navegador.acessarPagina("stackoverflow.com");
navegador.acessarPagina("wikipedia.org");

navegador.voltar();         // Volta para StackOverflow
navegador.voltar();         // Volta para YouTube

navegador.traverseReverse(); // Mostra hist√≥rico reverso

navegador.irParaPagina("google.com"); // Vai direto pra google
navegador.irParaPagina("facebook.com"); // N√£o existe